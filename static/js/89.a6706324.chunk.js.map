{"version":3,"file":"static/js/89.a6706324.chunk.js","mappings":"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","sources":["webpack://Task-app/./src/components/UI/Button/Button.css?d015","components/UI/Button/Button.js","webpack://Task-app/./src/components/UI/Input/Input.css?035c","components/UI/Input/Input.js","webpack://Task-app/./src/components/UI/Toast/toast.css?5c51","components/UI/Toast/toast.js","webpack://Task-app/./src/containers/Tasks/Edit Task/Edit_Task.css?f624","containers/Tasks/Edit Task/Edit_Task.js","shared/updateObject.js","shared/validate.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Button\":\"Button_Button__gr25a\",\"Success\":\"Button_Success__bQa0I\",\"Danger\":\"Button_Danger__A5JK0\"};","import React from 'react';\r\nimport classes from './Button.css'\r\n\r\nexport default function Button(props) {\r\n  return (\r\n    <button className={[classes.Button, classes[props.type]].join(' ')} disabled={!props.disable}> {props.children} </button>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"Label\":\"Input_Label__gL+xR\",\"Input\":\"Input_Input__7IJ8I\",\"InputElement\":\"Input_InputElement__X1yVd\",\"Invalid\":\"Input_Invalid__csHbb\",\"textArea\":\"Input_textArea__JyqzH\"};","import React from 'react';\r\nimport classes from './Input.css'\r\n\r\nexport default function Input(props) {\r\n    let input=''\r\n    switch (props.type) {\r\n        case 'text':\r\n            input = <input onChange={props.change} className={classes.Input} {...props.eleconfig} value={props.value} />\r\n            break;\r\n        case 'textarea':\r\n            input= <textarea  onChange={props.change} className={classes.textArea} {...props.eleconfig} value={props.value} />\r\n            break;\r\n        case 'number':\r\n            input = <input onChange={props.change} className={classes.Input} {...props.eleconfig} value={props.value} />\r\n            break;\r\n        case 'select':\r\n            input =( <select  onChange={props.change} className={classes.InputElement} value={props.value}>\r\n                {props.eleconfig.Options.map((option) => {\r\n                     return <option className={classes.Option} key={option.value} value={option.value}>{option.displayValue}</option>\r\n                    })}\r\n            </select> )\r\n            break;\r\n        default:\r\n            input = <input onChange={props.change} className={classes.Input} {...props.eleconfig} value={props.value} />\r\n            break;\r\n    }\r\n  return (\r\n    <div className={classes.Input}>\r\n    <label className={classes.Label}>{props.label}</label>\r\n    {input}\r\n</div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"Toast\":\"toast_Toast__7dqUI\"};","import React, { Component } from 'react'\r\nimport classes from './toast.css'\r\n\r\nexport default class toast extends Component {\r\n  render() {\r\n    return (\r\n      <div className={classes.Toast} style={{transform : this.props.show ? 'translateY(0)':'translateY(-100vh)',opacity:this.props.show?'1':'0' }}>\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Edit_Task_form__pnBvz\"};","import React,{useState , useEffect } from 'react';\r\nimport classes from './Edit_Task.css'\r\nimport {useParams} from 'react-router-dom';\r\nimport Input from '../../../components/UI/Input/Input'\r\nimport Button from '../../../components/UI/Button/Button'\r\nimport Toast from '../../../components/UI/Toast/toast';\r\nimport updateObject from '../../../shared/updateObject'\r\nimport validator from '../../../shared/validate'\r\nimport axios from 'axios';\r\n\r\nfunction Edit(props) {\r\n  const [valid,setValid] = useState(false)\r\n  const [show,setShow] = useState(false)\r\n  const [message, setMessage ] = useState(null)\r\n    const [form,setForm] = useState(\r\n      {\r\n          title:{\r\n            type:'text',\r\n            eleConfig:{\r\n              type:'text',\r\n              placeholder:'Go for a walk',\r\n            },\r\n            value:'',\r\n            validation:{\r\n              required:true\r\n            },\r\n            valid:false\r\n          },\r\n          description:{\r\n            type:'textarea',\r\n            eleConfig:{\r\n              type:'textarea',\r\n              placeholder:'Go for a walk at 12 PM daily'\r\n            },\r\n            value:'',\r\n            validation:{\r\n              required:true\r\n            },\r\n            valid:false\r\n          },\r\n          complete:{\r\n            type:'select',\r\n            eleConfig:{\r\n              Options:[\r\n                {value:\"false\",displayValue:'false'},\r\n                {value:\"true\",displayValue:'true'},\r\n              ]\r\n            },\r\n            value:'false',\r\n            validation:{}\r\n          }\r\n          }\r\n    )\r\n    let {id}=useParams()\r\n    let forms=[]\r\n    for(let element in form){\r\n      forms.push({\r\n        id: element,\r\n        label:element,\r\n        config: form[element]\r\n      })\r\n    }\r\n    useEffect(()=>{\r\n        const fetchTask = (cb)=>{\r\n        const token = localStorage.getItem('token')\r\n        axios.get('/task/'+id,{\r\n            headers :{\r\n                'Authorization' : token\r\n            }\r\n        })\r\n        .then(res=>{\r\n          cb(res.data);\r\n        })\r\n        .catch(err=>err)\r\n      }\r\n\r\n      fetchTask((data)=>{\r\n        let formData = {...form}\r\n          for(let v in form){\r\n           let formElement = updateObject(formData[v],{\r\n                value : data[v],\r\n                valid:true\r\n            })\r\n            formData = updateObject(formData  , {\r\n                [v] : formElement\r\n            })\r\n          }\r\n          setForm(formData)\r\n      });\r\n    },[id])\r\n\r\n    const submitHandler = (e)=>{\r\n      e.preventDefault()\r\n      let data = {}\r\n      for(let v in form){\r\n          data[v] = form[v].value\r\n      }\r\n      const token = localStorage.getItem('token')\r\n      axios.patch('/task/'+id , data , {\r\n        headers :{\r\n          'Authorization' : token\r\n      }\r\n      }).then(res=>{\r\n        setMessage('Task is Updated Successfully')\r\n        setShow(true)\r\n        hideToast();\r\n      })\r\n      .catch(err=>{\r\n        setMessage('Something went wrong Unable to update')\r\n        setShow(true)\r\n        hideToast();\r\n      })\r\n    }\r\n\r\n    const hideToast = ()=>{\r\n      setTimeout(()=>{\r\n        setShow(false)\r\n      }, 2000)\r\n    }\r\n\r\n    const changeHanlder=(e,id)=>{\r\n      let data=updateObject(form,{\r\n        [id]:updateObject(form[id],{\r\n        value:e.target.value,\r\n        valid:validator(e.target.value,form[id].validation)\r\n      })\r\n    })\r\n      let isVlaid = true\r\n      for(let v in data){\r\n        isVlaid = isVlaid && data[v].valid\r\n      }\r\n      setValid(isVlaid)\r\n      setForm(data)\r\n    }\r\n  return (\r\n    <React.Fragment>\r\n    <Toast show={show} className={classes.Toast}>{message}</Toast>\r\n    <div className={classes.form}>\r\n        <form onSubmit={(e)=>submitHandler(e)}>\r\n          {\r\n            forms.map(element => {\r\n            return (  \r\n                <Input key={element.id}\r\n                type={element.config.type}\r\n                eleconfig={element.config.eleConfig}\r\n                value={element.config.value}\r\n                label={element.label} \r\n                change={(e)=>changeHanlder(e,element.id)} />\r\n              )\r\n            })\r\n          }\r\n          <Button type='Success' disable={valid} >Update</Button>\r\n        </form>\r\n    </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\n\r\nexport default Edit;","const updateObject=(prevState,newState)=>{\r\n    return {\r\n        ...prevState,\r\n        ...newState\r\n    }\r\n}\r\nexport default  updateObject;","import validator from 'validator';\r\n\r\nconst validate=(value,rule)=>{\r\n    if(rule.required){\r\n        if(value.trim('')==='') return false\r\n    }\r\n\r\n    if(rule.isemail){\r\n        if(!validator.isEmail(value))\r\n        return false\r\n    }\r\n\r\n    if(value.length < rule.min) return false\r\n    else if(value.length>rule.max) return false\r\n\r\n    return true\r\n}\r\n\r\nexport default validate;\r\n"],"names":["Button","props","className","classes","type","join","disabled","disable","children","Input","input","onChange","change","eleconfig","value","Options","map","option","displayValue","label","toast","style","transform","this","show","opacity","Component","useState","valid","setValid","setShow","message","setMessage","title","eleConfig","placeholder","validation","required","description","complete","form","setForm","id","useParams","forms","element","push","config","useEffect","cb","token","localStorage","getItem","axios","headers","then","res","data","catch","err","fetchTask","formData","v","formElement","updateObject","hideToast","setTimeout","onSubmit","e","preventDefault","submitHandler","target","validator","isVlaid","changeHanlder","prevState","newState","rule","trim","isemail","length","min","max"],"sourceRoot":""}