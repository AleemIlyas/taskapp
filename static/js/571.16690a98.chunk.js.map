{"version":3,"file":"static/js/571.16690a98.chunk.js","mappings":"+LACA,EAAwB,qB,SCEHA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAOlB,OAPkBA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SAAAA,MACnB,WACE,OACE,gBAAKC,UAAWC,EAAeC,MAAO,CAACC,UAAYC,KAAKC,MAAMC,KAAO,gBAAgB,qBAAqBC,QAAQH,KAAKC,MAAMC,KAAK,IAAI,KAAtI,SACGF,KAAKC,MAAMG,UAGjB,OAPkBT,CAAcU,EAAAA,U,0HCFnC,EAAyB,uBAAzB,EAAyD,uB,SCQzD,EANe,SAACJ,GACZ,IAAMK,EAAO,CAACT,GAEd,OADGI,EAAMM,QAAQD,EAAOE,KAAKX,IACtB,mBAAQD,UAAWU,EAAOG,KAAK,KAAMC,QAAST,EAAMU,OAApD,SAA8DV,EAAMW,MAE9E,ECPD,EAAyB,qBAAzB,EAA2D,yBAA3D,EAA8F,sBCA9F,EAAuB,mBAAvB,EAAmD,qBAAnD,EAAgF,oB,8BCKjE,SAASC,EAAKZ,GACzB,IAAMa,GAAWC,EAAAA,EAAAA,MACbC,EAAS,KAgBb,OAdIA,EADc,aAAff,EAAMW,MAED,iBAAKhB,UAAWC,EAAhB,WACA,SAAC,MAAD,CAAea,QAAST,EAAMgB,YAC9B,SAAC,MAAD,CAAgBrB,UAAWC,EAAea,QAAW,kBAAII,EAASI,EAAAA,GAA0BjB,EAAMkB,IAA7C,QAKhD,iBAAKvB,UAAWC,EAAhB,WACL,SAAC,MAAD,CAAea,QAAST,EAAMgB,YAC9B,SAAC,MAAD,CAAgBP,QAAW,kBAAII,EAASI,EAAAA,GAA6BjB,EAAMkB,IAAhD,KAC3B,SAAC,MAAD,CAAgBvB,UAAWC,EAAea,QAAW,kBAAII,EAASI,EAAAA,GAA0BjB,EAAMkB,IAA7C,QAIzD,iBAAKvB,UAAWC,EAAhB,WACI,wCAAc,0BAAKI,EAAMmB,MAAX,OAAd,QACA,2CAAmBnB,EAAMoB,YAAzB,QACA,yCAAe,gCAAQpB,EAAMqB,SAAd,OAAf,OACCN,IAIZ,C,kCCxBKO,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAgBH,OAhBGA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACJC,MAAM,CACJb,QAAO,GADH,EAYNc,cAAgB,SAACC,GACZA,IAAQ,EAAKF,MAAMb,QACrB,EAAKgB,SAAS,CAAChB,QAAQ,EAAKa,MAAMb,QACpC,IAyCA,OAzCA,yCAZD,WACEX,KAAKC,MAAM2B,SAAS5B,KAAKwB,MAAMb,OAChC,mCAED,SAAmBkB,EAAYC,GAC7B,GAAGA,IAAc9B,KAAKwB,QAAUxB,KAAKC,MAAM8B,QAAUF,EAAUE,OAAS/B,KAAKC,MAAM+B,OAAS,OAAO,EACnGhC,KAAKC,MAAM2B,SAAS5B,KAAKwB,MAAMb,OAChC,uBAOD,WAAU,IAAD,OACHoB,EAAQ,KAyBb,OAxBI/B,KAAKC,MAAMgC,UAASF,GAAQ,SAAC,IAAD,KAE5B/B,KAAKC,MAAM+B,QAAOD,GAAQ,eAAGnC,UAAWC,EAAd,cAAiCG,KAAKC,MAAM+B,MAA5C,QAE1BhC,KAAKC,MAAM8B,QAEVA,EADG/B,KAAKC,MAAM8B,MAAMG,OAAS,EACrBlC,KAAKC,MAAM8B,MAAMI,KAAI,SAACT,GAC5B,OAAO,SAAC,EAAD,CAELN,MAASM,EAAMN,MACfD,GAAIO,EAAMU,IACVf,YAAeK,EAAML,YACrBC,UAA+B,IAAnBI,EAAMJ,SAAoB,OAAS,QAC/CL,SAAY,kBAAI,EAAKhB,MAAMgB,SAASS,EAAMU,IAAI,QAAlC,EACZxB,MAA8B,IAAtB,EAAKY,MAAMb,OAAmB,cAAgB,YAN/Ce,EAAMU,IAQhB,KAGK,cAAGxC,UAAWC,EAAd,kCAMR,UAAC,WAAD,YACE,SAAC,IAAD,CAAOK,KAAMF,KAAKC,MAAMC,KAAxB,SAA+BF,KAAKC,MAAMW,KAAOZ,KAAKC,MAAMW,KAAM,0BAClE,iBAAKhB,UAAWC,EAAhB,WACA,SAAC,EAAD,CAAiCe,KAAK,iBAAiBL,QAASP,KAAKwB,MAAMb,OAAQA,OAAQ,kBAAI,EAAKc,eAAc,EAAvB,IAA7EzB,KAAKwB,MAAMb,SACzB,SAAC,EAAD,CAAgCC,KAAK,YAAaL,OAAQP,KAAKwB,MAAMb,OAASA,OAAQ,kBAAI,EAAKc,eAAc,EAAvB,GAAzEzB,KAAKwB,MAAMb,YAExB,iBAAKf,UAAWC,EAAhB,WACE,uCACEkC,OAIT,OAzDGR,CAAclB,EAAAA,WA4EpB,GAAegC,EAAAA,EAAAA,KAhBO,SAACb,GACrB,MAAM,CACJS,QAAUT,EAAMc,KAAKL,QACrBF,MAAQP,EAAMc,KAAKP,MACnBC,MAAMR,EAAMc,KAAKN,MACjB9B,KAAOsB,EAAMc,KAAKpC,KAClBU,KAAKY,EAAMc,KAAK1B,KAEnB,IAEwB,SAACE,GACxB,MAAM,CACJc,SAAS,SAACW,GAAD,OAASzB,EAAS0B,EAAAA,GAAqBD,GAAvC,EAEZ,GAED,CAA2DhB,E","sources":["webpack://Task-app/./src/components/UI/Toast/toast.css?5c51","components/UI/Toast/toast.js","webpack://Task-app/./src/components/UI/Toggle/Toggle.css?76f6","components/UI/Toggle/Toggle.js","webpack://Task-app/./src/containers/Tasks/Task.css?917f","webpack://Task-app/./src/components/Task/Task.css?8c68","components/Task/Task.js","containers/Tasks/Task.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Toast\":\"toast_Toast__7dqUI\"};","import React, { Component } from 'react'\r\nimport classes from './toast.css'\r\n\r\nexport default class toast extends Component {\r\n  render() {\r\n    return (\r\n      <div className={classes.Toast} style={{transform : this.props.show ? 'translateY(0)':'translateY(-100vh)',opacity:this.props.show?'1':'0' }}>\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"Toggle\":\"Toggle_Toggle__JCvoF\",\"active\":\"Toggle_active__dRy5a\"};","import React from 'react';\r\nimport classes from './Toggle.css';\r\n\r\nconst Toggle = (props)=>{\r\n    const styles=[classes.Toggle]\r\n    if(props.active) styles.push(classes.active)\r\n    return <button className={styles.join(\" \")} onClick={props.toggle} >{props.type}</button>\r\n\r\n}\r\nexport default Toggle;","// extracted by mini-css-extract-plugin\nexport default {\"Toggle\":\"Task_Toggle__2l794\",\"Tasks_INFO\":\"Task_Tasks_INFO__FIsMk\",\"nothing\":\"Task_nothing__FlbJw\"};","// extracted by mini-css-extract-plugin\nexport default {\"Task\":\"Task_Task__Z8FEH\",\"option\":\"Task_option__8OOld\",\"close\":\"Task_close__ODkMC\"};","import React from 'react';\r\nimport classes from './Task.css';\r\nimport { AiOutlineEdit , AiOutlineClose , AiOutlineCheck } from 'react-icons/ai';\r\nimport * as actionCreators from '../../store/actions/taskAction'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport default function Task(props){\r\n    const dispatch = useDispatch()\r\n    let option = null\r\n    if(props.type === 'Complete'){\r\n        option = (\r\n            <div className={classes.option}>\r\n            <AiOutlineEdit onClick={props.navigate}/>\r\n            <AiOutlineClose className={classes.close} onClick = {()=>dispatch(actionCreators.deleteTask(props.id)) }/>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        option = <div className={classes.option}>\r\n            <AiOutlineEdit onClick={props.navigate}/>\r\n            <AiOutlineCheck onClick = {()=>dispatch(actionCreators.markCompleted(props.id)) }/>\r\n            <AiOutlineClose className={classes.close} onClick = {()=>dispatch(actionCreators.deleteTask(props.id)) }/>\r\n            </div>\r\n    }\r\n    return(\r\n        <div className={classes.Task}>\r\n            <span> Title: <h2>{props.title} </h2> </span>\r\n            <p> Description : {props.description} </p>\r\n            <p> Completed: <span> {props.complete} </span> </p>\r\n            {option}\r\n        </div>\r\n    )\r\n\r\n}","import React, { Component } from 'react';\r\nimport Toggle from '../../components/UI/Toggle/Toggle'\r\nimport classes from './Task.css';\r\nimport Task from '../../components/Task/Task';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../../store/index.js'\r\nimport Spinner from '../../components/UI/Spinner/spinner';\r\nimport Toast from '../../components/UI/Toast/toast';\r\n\r\nclass Tasks extends Component {\r\n  state={\r\n    toggle:false\r\n  }\r\n  componentDidMount(){\r\n    this.props.getTasks(this.state.toggle)\r\n  }\r\n\r\n  componentDidUpdate(prevProps , prevState){\r\n    if(prevState === this.state && (this.props.tasks !== prevProps.tasks || this.props.error )) return false\r\n    this.props.getTasks(this.state.toggle)\r\n  }\r\n\r\n  toggleHandler = (value)=>{\r\n    if(value===this.state.toggle) return\r\n     this.setState({toggle:!this.state.toggle})\r\n  }\r\n\r\n  render() {\r\n    let tasks = null\r\n    if(this.props.loading) tasks = <Spinner />    \r\n\r\n    if(this.props.error) tasks = <p className={classes.nothing}> {this.props.error} </p>\r\n      \r\n    if(this.props.tasks){\r\n        if(this.props.tasks.length > 0){\r\n        tasks = this.props.tasks.map((value)=>{\r\n          return <Task \r\n            key = {value._id}\r\n            title = {value.title}\r\n            id={value._id}\r\n            description = {value.description}\r\n            complete = {value.complete === true ? 'true' : 'false' }\r\n            navigate= { ()=>this.props.navigate(value._id+'/edit') }\r\n            type = {this.state.toggle === false ? 'In-Complete' : 'Complete' }\r\n          />\r\n        })\r\n      }\r\n    else{\r\n      tasks = <p className={classes.nothing}> Nothing to show! </p>\r\n    }  \r\n    }\r\n\r\n\r\n   return (\r\n      <React.Fragment>\r\n        <Toast show={this.props.show}>{this.props.type ? this.props.type :'Something went wrong' }</Toast>\r\n        <div className={classes.Toggle}>\r\n        <Toggle key={!this.state.toggle} type=\" In-Completed \" active={!this.state.toggle} toggle={()=>this.toggleHandler(false)}/>\r\n        <Toggle key={this.state.toggle} type=\"Completed\"  active={this.state.toggle}  toggle={()=>this.toggleHandler(true)}/>\r\n        </div>\r\n        <div className={classes.Tasks_INFO}>\r\n          <h2>Your Tasks</h2>\r\n          { tasks }\r\n          </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n  return{\r\n    loading : state.task.loading,\r\n    tasks : state.task.tasks,\r\n    error:state.task.error,\r\n    show : state.task.show,\r\n    type:state.task.type\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n  return{\r\n    getTasks:(query)=>dispatch(actionTypes.getTasks(query))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Tasks);\r\n"],"names":["toast","className","classes","style","transform","this","props","show","opacity","children","Component","styles","active","push","join","onClick","toggle","type","Task","dispatch","useDispatch","option","navigate","actionCreators","id","title","description","complete","Tasks","state","toggleHandler","value","setState","getTasks","prevProps","prevState","tasks","error","loading","length","map","_id","connect","task","query","actionTypes"],"sourceRoot":""}